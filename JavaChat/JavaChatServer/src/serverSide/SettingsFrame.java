/*
 * SettingsFrame.java
 *
 * Created on 23 AralÄ±k 2007 Pazar, 01:48
 */

package serverSide;

/**
 *
 * @author  Alp
 */

import javax.swing.JOptionPane;
import java.util.StringTokenizer;

public class SettingsFrame extends javax.swing.JFrame implements MessageSender
{
    
    MessageTaker target;
    
    /** Creates new form SettingsFrame */
    public SettingsFrame() 
    {
        target=null;
        initComponents();
    }
    public SettingsFrame(MessageTaker m) 
    {
        this.setLocation(300, 300);
        this.target=m;
        this.setVisible(true);
        this.setResizable(false);
        initComponents();
    }
    
    public Object send(Object o)
    {
        if(target!=null)
            target.take(o);
        else
            return null;
        return o;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fields = new javax.swing.JPanel();
        encLabel = new javax.swing.JLabel();
        srvraddLabel = new javax.swing.JLabel();
        reqLabel = new javax.swing.JLabel();
        listLabel = new javax.swing.JLabel();
        smsLabel = new javax.swing.JLabel();
        smlLabel = new javax.swing.JLabel();
        cmsLabel = new javax.swing.JLabel();
        cmlLabel = new javax.swing.JLabel();
        sockLabel = new javax.swing.JLabel();
        encField = new javax.swing.JTextField();
        srvraddField = new javax.swing.JTextField();
        reqField = new javax.swing.JTextField();
        listField = new javax.swing.JTextField();
        smsField = new javax.swing.JTextField();
        smlField = new javax.swing.JTextField();
        cmsField = new javax.swing.JTextField();
        cmlField = new javax.swing.JTextField();
        sockField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        buttons = new javax.swing.JPanel();
        save = new javax.swing.JButton();
        reset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Settings");

        encLabel.setText("encryptionKey: ");

        srvraddLabel.setText("serverAddress:");

        reqLabel.setText("requestPort:");

        listLabel.setText("listPort:");

        smsLabel.setText("serverMessageSender:");

        smlLabel.setText("serverMessageListener:");

        cmsLabel.setText("clientMessageSender:");

        cmlLabel.setText("clientMessageListener:");

        sockLabel.setText("socketTimeout:");

        encField.setText(Constants.ROOT+"");
        encField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encFieldActionPerformed(evt);
            }
        });

        srvraddField.setText(Constants.SERVER_ADDRESS);
        srvraddField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srvraddFieldActionPerformed(evt);
            }
        });

        reqField.setText(Constants.REQUESTPORT+"");
        reqField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqFieldActionPerformed(evt);
            }
        });

        listField.setText(Constants.LISTPORT+"");
        listField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listFieldActionPerformed(evt);
            }
        });

        smsField.setText(Constants.SERVER_MESSAGESENDER_PORT+"");
        smsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smsFieldActionPerformed(evt);
            }
        });

        smlField.setText(Constants.SERVER_MESSAGELISTENER_PORT+"");
        smlField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smlFieldActionPerformed(evt);
            }
        });

        cmsField.setText(Constants.CLIENT_MESSAGESENDER_PORT+"");
        cmsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmsFieldActionPerformed(evt);
            }
        });

        cmlField.setText(Constants.CLIENT_MESSAGELISTENER_PORT+"");
        cmlField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmlFieldActionPerformed(evt);
            }
        });

        sockField.setText(Constants.SOCKETTIMEOUT+"");
        sockField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sockFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Warning: If you don't know what you are doing, stay away from here...");

        javax.swing.GroupLayout fieldsLayout = new javax.swing.GroupLayout(fields);
        fields.setLayout(fieldsLayout);
        fieldsLayout.setHorizontalGroup(
            fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(fieldsLayout.createSequentialGroup()
                        .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(encLabel)
                            .addComponent(srvraddLabel)
                            .addComponent(reqLabel)
                            .addComponent(listLabel)
                            .addComponent(smsLabel)
                            .addComponent(smlLabel)
                            .addComponent(cmsLabel)
                            .addComponent(cmlLabel)
                            .addComponent(sockLabel))
                        .addGap(54, 54, 54)
                        .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sockField, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                            .addComponent(cmlField, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                            .addComponent(cmsField, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                            .addComponent(smlField, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                            .addComponent(smsField, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                            .addComponent(listField, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                            .addComponent(reqField, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                            .addComponent(srvraddField, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                            .addComponent(encField, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))))
                .addContainerGap())
        );
        fieldsLayout.setVerticalGroup(
            fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fieldsLayout.createSequentialGroup()
                .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encLabel)
                    .addComponent(encField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(srvraddLabel)
                    .addComponent(srvraddField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reqLabel)
                    .addComponent(reqField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listLabel)
                    .addComponent(listField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smsLabel)
                    .addComponent(smsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smlLabel)
                    .addComponent(smlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmsLabel)
                    .addComponent(cmsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmlLabel)
                    .addComponent(cmlField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sockLabel)
                    .addComponent(sockField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsLayout = new javax.swing.GroupLayout(buttons);
        buttons.setLayout(buttonsLayout);
        buttonsLayout.setHorizontalGroup(
            buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsLayout.createSequentialGroup()
                .addContainerGap(270, Short.MAX_VALUE)
                .addComponent(reset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(save)
                .addContainerGap())
        );
        buttonsLayout.setVerticalGroup(
            buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsLayout.createSequentialGroup()
                .addGroup(buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(reset))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttons, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fields, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        encField.setText(Constants.ROOT);

        srvraddField.setText(Constants.SERVER_ADDRESS);

        reqField.setText(""+Constants.REQUESTPORT);

        listField.setText(""+Constants.LISTPORT);

        smsField.setText(""+Constants.SERVER_MESSAGESENDER_PORT);

        smlField.setText(""+Constants.SERVER_MESSAGELISTENER_PORT);

        cmsField.setText(""+Constants.CLIENT_MESSAGESENDER_PORT);

        cmlField.setText(""+Constants.CLIENT_MESSAGELISTENER_PORT);

        sockField.setText(""+Constants.SOCKETTIMEOUT);
    }//GEN-LAST:event_resetActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        try
        {
            int requestport = Integer.parseInt(reqField.getText());
            if(!(requestport>=1 && requestport<=65535))
                throw new SettingsException("requestPort should be in the range of 1 to 65535");
            
            int listport = Integer.parseInt(listField.getText());
            if(!(listport>=1 && listport<=65535))
                throw new SettingsException("listPort should be in the rage of 1 to 65535");
            
            int sms = Integer.parseInt(smsField.getText());
            if(!(sms>=1 && sms<=65535))
                throw new SettingsException("serverMessageSender should be in the rage of 1 to 65535");
            
            int sml = Integer.parseInt(smlField.getText());
            if(!(sml>=1 && sml<=65535))
                throw new SettingsException("serverMessageListener should be in the rage of 1 to 65535");
            
            int cms = Integer.parseInt(cmsField.getText());
            if(!(cms>=1 && cms<=65535))
                throw new SettingsException("clientMessageSender should be in the rage of 1 to 65535");
            
            int cml = Integer.parseInt(cmlField.getText());
            if(!(cml>=1 && cml<=65535))
                throw new SettingsException("clientMessageListener should be in the rage of 1 to 65535");
            
            int sock = Integer.parseInt(sockField.getText());
            if(sock<100)
                throw new SettingsException("socketTimeout should be greater than 100 milliseconds");
            
            String ip = srvraddField.getText();
            if(!ip.equals("localhost"))
            {
                StringTokenizer tokenizer = new StringTokenizer(ip,".");
                if(tokenizer.countTokens()!=4)
                    throw new SettingsException("IP address found to be faulty: ParseException");
                int[] numbers = new int[4];
                for(int i=0; i<4; i++)
                    numbers[i] = Integer.parseInt(tokenizer.nextToken());
                for(int i=0; i<numbers.length; i++)
                    if(!(numbers[i]>=0 && numbers[i]<=255))
                        throw new SettingsException("IP address found to be faulty: RangeException");
            }
            
            Constants.REQUESTPORT = requestport;
            Constants.LISTPORT = listport;
            Constants.SERVER_MESSAGESENDER_PORT = sms;
            Constants.SERVER_MESSAGELISTENER_PORT = sml;
            Constants.CLIENT_MESSAGESENDER_PORT = cms;
            Constants.CLIENT_MESSAGELISTENER_PORT = cml;
            Constants.SOCKETTIMEOUT = sock;
            Constants.SERVER_ADDRESS = ip;
            Constants.ROOT = encField.getText();
            send("\n");
            send("settingsSuccess");
            JOptionPane.showMessageDialog(null, "Settings Saved", "Success!", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        }
        catch(Exception e)
        {
            send("\n");
            send("settingsFail");
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveActionPerformed

    private void srvraddFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srvraddFieldActionPerformed
        saveActionPerformed(evt);
    }//GEN-LAST:event_srvraddFieldActionPerformed

    private void encFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encFieldActionPerformed
        saveActionPerformed(evt);
    }//GEN-LAST:event_encFieldActionPerformed

    private void reqFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqFieldActionPerformed
        saveActionPerformed(evt);
    }//GEN-LAST:event_reqFieldActionPerformed

    private void listFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listFieldActionPerformed
        saveActionPerformed(evt);
    }//GEN-LAST:event_listFieldActionPerformed

    private void smsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smsFieldActionPerformed
        saveActionPerformed(evt);
    }//GEN-LAST:event_smsFieldActionPerformed

    private void smlFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smlFieldActionPerformed
        saveActionPerformed(evt);
    }//GEN-LAST:event_smlFieldActionPerformed

    private void cmsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmsFieldActionPerformed
        saveActionPerformed(evt);
    }//GEN-LAST:event_cmsFieldActionPerformed

    private void cmlFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmlFieldActionPerformed
        saveActionPerformed(evt);
    }//GEN-LAST:event_cmlFieldActionPerformed

    private void sockFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sockFieldActionPerformed
        saveActionPerformed(evt);
    }//GEN-LAST:event_sockFieldActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SettingsFrame().setVisible(true);
            }
        });
    }    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttons;
    private javax.swing.JTextField cmlField;
    private javax.swing.JLabel cmlLabel;
    private javax.swing.JTextField cmsField;
    private javax.swing.JLabel cmsLabel;
    private javax.swing.JTextField encField;
    private javax.swing.JLabel encLabel;
    private javax.swing.JPanel fields;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField listField;
    private javax.swing.JLabel listLabel;
    private javax.swing.JTextField reqField;
    private javax.swing.JLabel reqLabel;
    private javax.swing.JButton reset;
    private javax.swing.JButton save;
    private javax.swing.JTextField smlField;
    private javax.swing.JLabel smlLabel;
    private javax.swing.JTextField smsField;
    private javax.swing.JLabel smsLabel;
    private javax.swing.JTextField sockField;
    private javax.swing.JLabel sockLabel;
    private javax.swing.JTextField srvraddField;
    private javax.swing.JLabel srvraddLabel;
    // End of variables declaration//GEN-END:variables
    
    private class SettingsException extends Exception
    {
        public SettingsException(String s)
        {
            super(s);
        }
    }
    
    
}
