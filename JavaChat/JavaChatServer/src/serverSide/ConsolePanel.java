package serverSide;

/*
 * ConsolePanel.java
 *
 * Created on 21 AralÄ±k 2007 Cuma, 03:44
 */

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.io.File;
import java.io.FileWriter;
import java.util.LinkedList;

/**
 *
 * @author  Alp
 */
public class ConsolePanel extends javax.swing.JPanel implements MessageTaker,ActionSender
{
    private File logFile = new File("C:\\javaChat.log");
    private FileWriter fileWriter;
    private boolean logEnable = true;
    public void appendToFile(String s)
    {
        if(logEnable)
        {
            try
            {
                fileWriter.append(s);
                fileWriter.flush();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, "Error saving the log file closing the log...");
                logEnable=false;
            }
        }
    }
    private JFrame owner;
    private ServerHandler shell;
    private boolean started = false;
    private LinkedList<ActionListener> externalListeners = new LinkedList<ActionListener>();
    private ActionListener serverProcesses = new ActionListener()
    {
        public void actionPerformed(ActionEvent e)
        {
            println(">>Server process::");
            println("\t"+e.getActionCommand());
        }
    };
    private ActionListener listUpdater = new ActionListener()
    {
        public void actionPerformed(ActionEvent e)
        {
            JClientList.setModel(new javax.swing.AbstractListModel() 
            {
                public int getSize() 
                { 
                    if(shell!=null)
                        return shell.list().clients.size(); 
                    return 0;
                }
                public Object getElementAt(int i) 
                { 
                    if(shell!=null)
                        return shell.list().clients.get(i);
                    return null;
                }
            }
            );
        }
    };
    public boolean addActionListener(ActionListener a)
    {
        return externalListeners.add(a);
    }
    public void take(Object o)
    {
        String cmd = o.toString();
        processCommand(cmd);
    }
    public ActionEvent fireAction(String s)
    {
        ActionEvent a = new ActionEvent(this, -1, s);
        if(listUpdater!=null)
            listUpdater.actionPerformed(a);
        if(serverProcesses!=null)
            serverProcesses.actionPerformed(a);
        for(ActionListener al : externalListeners)
            al.actionPerformed(a);
        return a;
    }
    /** Creates new form ConsolePanel */
    public ConsolePanel() throws Exception
    {
        initComponents();
        if(logFile.exists())
            logFile.delete();
        logFile.createNewFile();
        fileWriter = new FileWriter(logFile);
        owner = new JFrame("FreeChat");
        shell = new ServerHandler();
        shell.addActionListener(listUpdater);
        shell.addActionListener(serverProcesses);
        owner.add(this);
        owner.pack();
        owner.setVisible(true);
        owner.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        entry.requestFocus();
        println("type \"help\" for help message");
    }
    public ConsolePanel(JFrame f) throws Exception
    {
        initComponents();
        if(logFile.exists())
            logFile.delete();
        logFile.createNewFile();
        fileWriter = new FileWriter(logFile);
        owner = f;
        shell = new ServerHandler();
        shell.addActionListener(listUpdater);
        shell.addActionListener(serverProcesses);
        owner.add(this);
        owner.pack();
        owner.setVisible(true);
        owner.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        entry.requestFocus();
        println("type \"help\" for help message");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        consolePanel = new javax.swing.JPanel();
        consoleScroll = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea(){
            @Override public void append(String s)
            {
                super.append(s);
                int lineCount = super.getText().split("\n").length;
                if(lineCount > 25)
                {
                    String newStr="";
                    for(int i=lineCount-25; i<lineCount; i++)
                    newStr += super.getText().split("\n")[i]+"\n";
                    super.setText(newStr);
                    lineCount = 25;
                }
                appendToFile(s);
            }
        }
        ;
        entry = new javax.swing.JTextField();
        jlist = new javax.swing.JPanel();
        jlistScroll = new javax.swing.JScrollPane();
        JClientList = new javax.swing.JList();

        setMinimumSize(new java.awt.Dimension(740, 480));

        consoleScroll.setAutoscrolls(true);

        console.setColumns(20);
        console.setEditable(false);
        console.setLineWrap(true);
        console.setRows(5);
        console.setToolTipText("Console");
        console.setWrapStyleWord(true);
        consoleScroll.setViewportView(console);

        entry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entryProcessor(evt);
            }
        });

        javax.swing.GroupLayout consolePanelLayout = new javax.swing.GroupLayout(consolePanel);
        consolePanel.setLayout(consolePanelLayout);
        consolePanelLayout.setHorizontalGroup(
            consolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(entry, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
            .addComponent(consoleScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );
        consolePanelLayout.setVerticalGroup(
            consolePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consolePanelLayout.createSequentialGroup()
                .addComponent(consoleScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entry, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
        );

        JClientList.setModel(new javax.swing.AbstractListModel()
            {
                public int getSize()
                {
                    return shell.list().clients.size();
                }
                public Object getElementAt(int i)
                {
                    return shell.list.clients.size();
                }
            }

        );
        JClientList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientClick(evt);
            }
        });
        jlistScroll.setViewportView(JClientList);

        javax.swing.GroupLayout jlistLayout = new javax.swing.GroupLayout(jlist);
        jlist.setLayout(jlistLayout);
        jlistLayout.setHorizontalGroup(
            jlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlistScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
        );
        jlistLayout.setVerticalGroup(
            jlistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlistScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(consolePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(consolePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlist, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void entryProcessor(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entryProcessor
        println(">>"+entry.getText());
        processCommand(entry.getText());
        entry.setText("");
    }//GEN-LAST:event_entryProcessor

    private void clientClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientClick
        if(shell.list().clients.size()!=0)
            if(evt.getClickCount()==2)
            {
                try
                {
                    int i = JClientList.getSelectedIndex();
                    Client c = shell.list().clients.get(i);
                    sendMessage(c);
                }
                catch(Exception e)
                {
                    this.handleExceptions(e);
                }
            }
    }//GEN-LAST:event_clientClick
    
    
    public synchronized void processCommand(String cmd)
    {
        try
        {
            if(cmd.equals("start"))
                startServer();
            else if(cmd.equals("stop"))
                stopServer();
            else if(cmd.equals("kill"))
                stopServer();
            else if(cmd.equals("exit"))
                stopServer();
            else if(cmd.equals("clients"))
                listClients();
            else if(cmd.equals("getinfo"))
                getInfo();
            else if(cmd.equals("serverinfo"))
                serverinfo();
            else if(cmd.equals("send"))
                sendMessage();
            else if(cmd.equals("sendAll"))
                sendAll();
            else if(cmd.equals("help"))
                help();
            else if(cmd.equals("settingsSuccess"))
                println("Settings changed");
            else if(cmd.equals("settingsFail"))
                println("Settings could not be changed");
            else if(cmd.equals("\n"))
                println("\n>>>>>>>>>>>>>>>>>>>>>>>\n");
            else if(cmd.startsWith("echo "))
                println(cmd.substring(cmd.indexOf("echo")+3));
            else
                println("type 'help' for help message");
            
        }
        catch(Throwable e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
    public boolean isServerStarted()
    {
        boolean result = false;
        if(shell!=null)
        {
            if(shell.messageListener!=null)
                result = result || shell.messageListener.isAlive();
            if(shell.requestListener!=null)
                result = result || shell.requestListener.isAlive();
        }
        return result;
    }
    private void help()
    {
        println("start - starts the messagelistener and requestlistener services");
        println("stop,kill,exit - stops the messagelistener and requestlistener services");
        println("clients - lists connected clients with indexes");
        println("getinfo - displays active threads (useful to see if services are still running)");
        println("serverinfo - displays server information Client Name, Computer Name, Host Address");
        println("send - send a message to one client as admin");
        println("sendAll - send a message to all clients as admin");
        println("help - display this message");
    }
    private boolean sendAll()
    {
        if(shell.list().clients.size()==0)
        {
            println("There is no one in the town...");
            return false;
        }
        String s = JOptionPane.showInputDialog("Enter message to send everyone:");
        for(Client c : shell.list().clients)
        {
            Message m = new Message(shell.server, c, s);
            shell.sendMessage(shell.server, m);
        }
        return true;
    }
    public String getLocalhostName()
    {
        return shell.getServer().getHostName();
    }
    private Server serverinfo()
    {
        Server s = shell.getServer();
        println(s.getName());
        println(s.getPcName());
        println(s.getHostName());
        return s;
    }
    private boolean sendMessage()
    {
        listClients();
        String s = JOptionPane.showInputDialog("Enter the assigned index of client:");
        int i = -1;
        try
        {
            i = Integer.parseInt(s);
            assert(i>=0 && i<shell.list().clients.size());
            String msg = JOptionPane.showInputDialog("Enter message:");
            Message m = new Message(shell.server, shell.list().clients.get(i),msg);
            shell.sendMessage(shell.server, m);
            return true;
        }
        catch(Exception e)
        {
            this.handleExceptions(e);
            println("Process aborted");
            return false;
        }
    }
    private boolean sendMessage(Client c)
    {
        try
        {
            String msg = JOptionPane.showInputDialog("Enter message:");
            Message m = new Message(shell.server, c, msg);
            shell.sendMessage(shell.server, m);
            return true;
        }
        catch(Exception e)
        {
            this.handleExceptions(e);
            return false;
        }
    }
    private synchronized void println(String s)
    {
        console.append("    "+s+"\n");
    } 
    public void getInfo()
    {
        Thread arr[] = new Thread[Thread.activeCount()];
        Thread.enumerate(arr);
        for(Thread t : arr)
            println(t.toString());
    }
    public void listClients()
    {
        println(shell.list().toString());
    }
    public boolean stopServer()
    {
        if(started)
        {
            if(shell==null)
                return false;
            shell.kill();
            shell = null;
            started = false;
            println("Server is going to stop in "+Constants.SOCKETTIMEOUT/1000d+" seconds");
            return true;
        }
        else
        {
            println("Server is not running...");
        }
        return false;
    }
    public synchronized boolean startServer() throws Exception
    {
        if(shell==null)
        {
            shell = new ServerHandler();
            shell.addActionListener(listUpdater);
            shell.addActionListener(serverProcesses);
        }
        if(!started)
        {
            shell.startMessageListener();
            shell.startRequestListener();
            started = true;
            return true;
        }
        else
        {
            println("Server is already running...");
            return false;
        }
    }
    private void handleExceptions(Exception e)
    {
        JOptionPane.showMessageDialog(null, e.getMessage());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList JClientList;
    private javax.swing.JTextArea console;
    private javax.swing.JPanel consolePanel;
    private javax.swing.JScrollPane consoleScroll;
    private javax.swing.JTextField entry;
    private javax.swing.JPanel jlist;
    private javax.swing.JScrollPane jlistScroll;
    // End of variables declaration//GEN-END:variables

}
